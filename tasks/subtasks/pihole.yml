---
- name: Install PiHole
  hosts: wg_vpn
  vars_files:
    - "../../vars/vars.yml"
  become: true

  tasks:
    - name: Download PiHole install script
      ansible.builtin.get_url:
        url: https://install.pi-hole.net
        dest: /tmp/basic-install.sh

    - name: Check if systemd-resolved config file exists
      stat:
        path: /etc/systemd/resolved.conf
      register: systemd_resolve

    - name: Turn off systemd-resolved stub
      lineinfile:
        path: /etc/systemd/resolved.conf
        regex: '^DNSStubListener='
        line: 'DNSStubListener=no'
      when: systemd_resolve.stat.exists == True

    - name: Restart resolved on Debian/Ubuntu
      service:
        name: systemd-resolved
        state: restarted
      when: systemd_resolve.stat.exists == True

    - name: Create PiHole Dir
      ansible.builtin.file:
        path: /etc/pihole
        state: directory
        mode: '0755'

    - name: Copy over setup template
      ansible.builtin.template:
        src: ../../templates/setupVars.conf.j2
        dest: /etc/pihole/setupVars.conf
        owner: root
        group: root
        mode: u=wr,g=r,o=r

    - name: Stop nginx to make sure pihole install doesn't think something is on port 80 already
      ansible.builtin.systemd:
        name: nginx
        state: stopped

    - name: Install PiHole on Debian/Ubuntu
      ansible.builtin.command: 'bash /tmp/basic-install.sh --unattended /dev/stdin'
      when: >
        ansible_selinux.status == "disabled" and
        ansible_distribution in ["Debian", "Ubuntu"]

    - name: Install PiHole on Fedora/CentOS with SELinux enabled
      ansible.builtin.shell: |
        export PIHOLE_SELINUX=true
        bash /tmp/basic-install.sh --unattended /dev/stdin
      when: >
        ansible_selinux.status == "enabled" and
        ansible_distribution in ["Fedora", "CentOS"]

    - name: Install PiHole on Fedora/CentOS with SELinux disabled
      ansible.builtin.shell: |
        bash /tmp/basic-install.sh --unattended /dev/stdin
      when: >
        ansible_selinux.status == "disabled" and
        ansible_distribution in ["Fedora", "CentOS"]

    - name: Install PiHole on AlmaLinux with SELinux enabled
      ansible.builtin.shell: |
        export PIHOLE_SELINUX=true
        export PIHOLE_SKIP_OS_CHECK=true
        bash /tmp/basic-install.sh --unattended /dev/stdin
      when: >
        ansible_selinux.status == "enabled" and
        ansible_distribution in ["AlmaLinux"]

    - name: Install PiHole on AlmaLinux with SELinux disabled
      ansible.builtin.shell: |
        PIHOLE_SKIP_OS_CHECK=true
        bash /tmp/basic-install.sh --unattended /dev/stdin
      when: >
        ansible_selinux.status == "disabled" and
        ansible_distribution in ["AlmaLinux"]

    - name: Remove Pihole installer file
      ansible.builtin.file:
        path: /tmp/basic-install.sh
        state: absent

    - name: Copy over path file
      ansible.builtin.copy:
        src: ../../templates/usrlocal.sh
        dest: /etc/profile.d/usrlocal.sh
      when: ansible_distribution in ["Fedora", "CentOS", "AlmaLinux"]

    - name: Copy over list-update util script
      ansible.builtin.copy:
        src: ../../utils/list-update.py
        dest: /etc/pihole/list-update.py

    - name: set pihole web password on Fedora/CentOS
      ansible.builtin.shell: |
        export PATH="$PATH:/usr/local/bin"
        pihole -a -p "{{ PI_WEBPASSWORD }}"
      when: >
        "PI_WEBPASSWORD != None" and
        ansible_distribution in ["Fedora", "CentOS", "AlmaLinux"]

    - name: set pihole web password on Debian/Ubuntu
      ansible.builtin.shell: |
        pihole -a -p "{{ PI_WEBPASSWORD }}"
      when: >
        "PI_WEBPASSWORD != None" and
        ansible_distribution in ["Debian", "Ubuntu"]

    - name: Fix SELinux File rules
      ansible.builtin.command: 'restorecon -R -v /var/www/html'
      when: >
        ansible_selinux.status == "enabled" and
        ansible_distribution in ["Fedora", "CentOS", "AlmaLinux"]
